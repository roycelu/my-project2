{"version":3,"sources":["components/Search.js","components/Availability.js","components/Stations.js","App.js","reportWebVitals.js","index.js"],"names":["Search","props","className","type","placeholder","value","text","onChange","onClick","word","Availability","useState","availability","setAvailability","useEffect","fetch","then","response","json","results","data","stations","filter","info","station_id","id","map","avail","num_bikes_available","num_docks_available","Stations","stationsData","setStationsData","updated","setUpdated","last_updated","name","toLowerCase","startsWith","station","style","borderStyle","margin","padding","capacity","address","Date","toString","App","setText","searchWord","setSearchWord","src","process","alt","e","preventDefault","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAeeA,G,MAbA,SAACC,GAEd,OACE,sBAAKC,UAAU,SAAf,UACE,iCACE,uBAAOC,KAAK,OAAOC,YAAY,kCAA+BC,MAAOJ,EAAMK,KAAMC,SAAUN,EAAMM,WACjG,wBAAQJ,KAAK,SAASK,QAASP,EAAMO,QAArC,uBAEF,uDAAsB,4BAAIP,EAAMQ,OAAhC,eCiBSC,EAzBM,SAACT,GAAW,IAAD,EAEUU,mBAAS,IAFnB,mBAEvBC,EAFuB,KAETC,EAFS,KAU9B,OANAC,qBAAU,WACRC,MAAM,qEACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAO,OAAIN,EAAgBM,EAAQC,KAAKC,eAC7C,CAACR,IAGF,qBAAKX,UAAU,eAAf,SACGU,EACEU,QAAO,SAAAC,GAAS,OAAOA,EAAKC,aAAevB,EAAMwB,MACjDC,KAAI,SAACC,GAAD,OACH,gCACE,8BAAG,gDAAuBA,EAAMC,uBAChC,8BAAG,iDAAwBD,EAAME,gCCgB9BC,EAhCE,SAAC7B,GAAW,IAAD,EAEcU,mBAAS,IAFvB,mBAEnBoB,EAFmB,KAELC,EAFK,OAGIrB,mBAAS,IAHb,mBAGnBsB,EAHmB,KAGVC,EAHU,KAW1B,OANApB,qBAAU,WACRC,MAAM,0EACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAO,OAAKa,EAAgBb,EAAQC,KAAKC,UAAWa,EAAWf,EAAQgB,mBAC5E,CAACH,EAAiBE,IAGnB,sBAAKhC,UAAU,WAAf,UACG6B,EACET,QAAO,SAACC,GACP,OAAOA,EAAKa,KAAKC,cAAcC,WAAWrC,EAAMQ,KAAK4B,kBAEtDX,KAAI,SAACa,GAAD,OACH,sBAAKC,MAAO,CAACC,YAAa,cAAeC,OAAQ,OAAQC,QAAS,QAAlE,UACE,6BAAMJ,EAAQH,OACd,8BAAG,iDAAwBG,EAAQK,YACnC,8BAAG,0CAAiBL,EAAQM,WAC5B,8BAAK,cAAC,EAAD,CAAcpB,GAAIc,EAAQf,qBAIrC,wCACA,4BAAG,4BAAI,IAAIsB,KAAa,IAARb,GAAcc,mBCErBC,EA3BH,WAAO,IAAD,EAEQrC,mBAAS,IAFjB,mBAETL,EAFS,KAEH2C,EAFG,OAGoBtC,mBAAS,IAH7B,mBAGTuC,EAHS,KAGGC,EAHH,KAgBhB,OACE,sBAAKjD,UAAU,MAAf,UACE,qBAAKkD,IAAKC,uCAAqDC,IAAI,SACnE,iDACA,cAAC,EAAD,CAAQhD,KAAMA,EAAMC,SAfF,SAACgD,GACrBA,EAAEC,iBACFP,EAAQM,EAAEE,OAAOpD,QAa8BG,QAV3B,SAAC+C,GACrBA,EAAEC,iBACFL,EAAc7C,GACd2C,EAAQ,KAO+DxC,KAAMyC,IAC3E,cAAC,EAAD,CAAUzC,KAAMyC,IAChB,iECfSQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5C,MAAK,YAAkD,IAA/C6C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fea1c18c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Search = (props) => {\r\n\r\n  return (\r\n    <div className=\"Search\">\r\n      <form>\r\n        <input type=\"text\" placeholder=\"Skriv inn på stasjonsnavn...\" value={props.text} onChange={props.onChange} />\r\n        <button type=\"submit\" onClick={props.onClick}>Søk</button>\r\n      </form>\r\n      <p>Søkeresultater for <b>{props.word}</b> ...</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;","import React, { useEffect, useState } from 'react';\r\n\r\nconst Availability = (props) => {\r\n\r\n  const [availability, setAvailability] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://gbfs.urbansharing.com/oslobysykkel.no/station_status.json\")\r\n    .then(response => response.json())\r\n    .then(results => setAvailability(results.data.stations));\r\n  }, [setAvailability]);\r\n\r\n  return (\r\n    <div className=\"Availability\">\r\n      {availability\r\n        .filter(info => {return info.station_id === props.id})\r\n        .map((avail) =>\r\n          <div>\r\n            <p><b>Ledige sykler: </b>{avail.num_bikes_available}</p>\r\n            <p><b>Ledige plasser: </b>{avail.num_docks_available}</p>\r\n          </div>\r\n        )\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Availability;","import React, { useEffect, useState } from 'react';\r\nimport Availability from './Availability';\r\n\r\nconst Stations = (props) => {\r\n\r\n  const [stationsData, setStationsData] = useState([]);\r\n  const [updated, setUpdated] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://gbfs.urbansharing.com/oslobysykkel.no/station_information.json\")\r\n    .then(response => response.json())\r\n    .then(results => (setStationsData(results.data.stations), setUpdated(results.last_updated)));\r\n  }, [setStationsData, setUpdated]);\r\n\r\n  return (\r\n    <div className=\"Stations\">\r\n      {stationsData\r\n        .filter((info) => {\r\n          return info.name.toLowerCase().startsWith(props.word.toLowerCase())\r\n        })\r\n        .map((station) =>\r\n          <div style={{borderStyle: 'dashed none', margin: '10px', padding: '10px'}}>\r\n            <h2 >{station.name}</h2>\r\n            <p><b>Maks kapasitet: </b>{station.capacity}</p>\r\n            <p><b>Adresse: </b>{station.address}</p>\r\n            <div><Availability id={station.station_id} /></div>\r\n          </div>\r\n        )\r\n      }\r\n      <p>~ ~ ~ ~</p>\r\n      <p><i>{new Date(updated*1000).toString()}</i></p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Stations;","import React, { useState } from 'react';\nimport './App.css';\nimport Search from './components/Search';\nimport Stations from './components/Stations';\n\nconst App = () => {\n\n  const [text, setText] = useState(\"\");\n  const [searchWord, setSearchWord] = useState(\"\");\n\n  const inputOnChange = (e) => {\n    e.preventDefault();\n    setText(e.target.value);\n  }\n  \n  const buttonOnClick = (e) => {\n    e.preventDefault();\n    setSearchWord(text);\n    setText(\"\");\n  }\n\n  return (\n    <div className=\"App\">\n      <img src={process.env.PUBLIC_URL + \"/oslo_city_bike_logo.png\"} alt=\"logo\" />\n      <h1>Sykkelstasjoner</h1>\n      <Search text={text} onChange={inputOnChange} onClick={buttonOnClick} word={searchWord} />\n      <Stations word={searchWord} />\n      <p>Made with ♥ by Royce Lu</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}